# Enable all rules by default
include: all_lint_rules.yaml
analyzer:
  strong-mode:
    implicit-casts: false
    implicit-dynamic: false
  errors:
    # Otherwise cause the import of all_lint_rules to warn because of some rules conflicts.
    # The conflicts are fixed in this file instead, so we can safely ignore the warning.
    included_file_warning: ignore
    # treat missing required parameters as a warning (not a hint)
    missing_required_param: warning
    # treat missing returns as a warning (not a hint)
    missing_return: warning
    # allow having TODOs in the code
    todo: ignore
# Explicitly disable only the rules we do not want.
linter:
  rules:
    # Single line `if`s are fine as recommended in Effective Dart "DO format your code using dartfmt"
    # pedantic: disabled
    # http://dart-lang.github.io/linter/lints/always_put_control_body_on_new_line.html
    always_put_control_body_on_new_line: false


    # Flutter widgets always put a Key as first optional parameter which breaks this rule.
    # Also violates other orderings like matching the class fields or alphabetically.
    # pedantic: disabled
    # http://dart-lang.github.io/linter/lints/always_declare_return_types.html
    always_put_required_named_parameters_first: false

    # Since dart 2.0 dart is a sound language, specifying types is not required anymore.
    # `var foo = 10;` is enough information for the compiler to make foo a int.
    # Violates Effective Dart "AVOID type annotating initialized local variables".
    # Makes code unnecessarily complex https://github.com/dart-lang/linter/issues/1620
    # pedantic: disabled
    # http://dart-lang.github.io/linter/lints/always_specify_types.html
    always_specify_types: false


    # All methods should define a return type. dynamic is no exception.
    # Violates Effective Dart "PREFER annotating with dynamic instead of letting inference fail"
    # pedantic: disabled
    # http://dart-lang.github.io/linter/lints/avoid_annotating_with_dynamic.html
    avoid_annotating_with_dynamic: false

    # A leftover from dart1, should be deprecated
    # pedantic: disabled
    # - https://github.com/dart-lang/linter/issues/1401
    # http://dart-lang.github.io/linter/lints/avoid_as.html
    avoid_as: false

    # There are no strong arguments to enable this rule because it is very strict. Catching anything is useful
    # and common even if not always the most correct thing to do.
    # pedantic: disabled
    # http://dart-lang.github.io/linter/lints/avoid_catches_without_on_clauses.html
    avoid_catches_without_on_clauses: false

    # Only useful when targeting JS
    # pedantic: disabled
    # http://dart-lang.github.io/linter/lints/avoid_double_and_int_checks.html
    avoid_double_and_int_checks: false

    # It is expected that mutable objects which override hash & equals shouldn't be used as keys for hashmaps.
    # This one use case doesn't make all hash & equals implementations for mutable classes bad.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/avoid_equals_and_hash_code_on_mutable_classes.html
    avoid_equals_and_hash_code_on_mutable_classes: false

    # Only useful when targeting JS
    # Warns about too large integers when compiling to JS
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/avoid_js_rounded_ints.html
    avoid_js_rounded_ints: false

    # Not recommended to break dartdoc but besides that there is no reason to continue with bad naming
    # https://dart-lang.github.io/linter/lints/avoid_renaming_method_parameters.html
    avoid_renaming_method_parameters: false

    # Especially with Non-Nullable types on the horizon, `int?` is fine.
    # There are plenty of valid reasons to return null.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/avoid_returning_null.html
    avoid_returning_null: false

    # Hinting you forgot about the cascade operator. But too often you did this on purpose.
    # There are plenty of valid reasons to return this.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/avoid_returning_this.html
    avoid_returning_this: false


    # Might cause frame drops because of synchronous file access on mobile, especially on older phones with slow storage.
    # There are no known measurements sync access does *not* drop frames.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/avoid_slow_async_io.html
    avoid_slow_async_io: false

    # Adding the type is not required, but sometimes improves readability. Therefore removing it doesn't always help
    # https://dart-lang.github.io/linter/lints/avoid_types_on_closure_parameters.html
    avoid_types_on_closure_parameters: false

    # The cascade syntax is weird and you shouldn't be forced to use it.
    # False positives:
    # https://github.com/dart-lang/linter/issues/1589
    #
    # https://dart-lang.github.io/linter/lints/cascade_invocations.html
    cascade_invocations: false

    # False positives, not reliable enough
    # - https://github.com/dart-lang/linter/issues/1381
    #
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/close_sinks.html
    close_sinks: false

    # False positives:
    # - https://github.com/dart-lang/linter/issues/1142
    #
    # https://dart-lang.github.io/linter/lints/comment_references.html
    comment_references: false

    # Still experimental and pretty much work when enforced
    # https://dart-lang.github.io/linter/lints/diagnostic_describe_all_properties.html
    diagnostic_describe_all_properties: false

    # Very flutter specific, not applicable for all projects
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/flutter_style_todos.html
    flutter_style_todos: false # not all todos require a ticket

    # Nobody wants to manually wrap lines when changing a few words. This rule is too hard to be a "general" rule
    # https://dart-lang.github.io/linter/lints/lines_longer_than_80_chars.html
    lines_longer_than_80_chars: false

    # Good for libraries to prevent unnecessary code paths.
    # False positives may occur for applications when boolean properties are generated by external programs
    # producing auto-generated source code
    #
    # Known issue: while(true) loops https://github.com/dart-lang/linter/issues/453
    #
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/literal_only_boolean_expressions.html
    literal_only_boolean_expressions: false

    # Types for local variables may improve readability.
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/omit_local_variable_types.html
    omit_local_variable_types: false

    # Defining interfaces (abstract classes), with only one method, makes sense architecture wise
    # Discussion: https://github.com/passsy/dart-lint/issues/2
    #
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/one_member_abstracts.html
    one_member_abstracts: false

    # Since Errors aren't intended to be caught (see avoid_catching_errors), throwing anything
    # doesn't cause trouble.
    # https://dart-lang.github.io/linter/lints/only_throw_errors.html
    only_throw_errors: false

    # Only relevant for packages, not applications or general dart code
    # https://dart-lang.github.io/linter/lints/package_api_docs.html
    package_api_docs: false


    # Is contradictory to `no_adjacent_strings_in_list`
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_adjacent_string_concatenation.html
    prefer_adjacent_string_concatenation: false

    # Assertions blocks don't require a message because they throw simple to understand errors
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_asserts_with_message.html
    prefer_asserts_with_message: false


    # Use whatever makes you happy. lint doesn't define a style
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_double_quotes.html
    prefer_double_quotes: false

    # Single line methods + implementation makes it hard to write comments for that line.
    # Dense code isn't necessarily better code.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_expression_function_bodies.html
    prefer_expression_function_bodies: false

    # Dense code isn't necessarily better code
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_foreach.html
    prefer_foreach: false

    # There is no argument which makes int literals better than double literals for doubles.
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/prefer_int_literals.html
    prefer_int_literals: false


    # Users of a 3rd party mixins can't change 3rd party code to use the mixin syntax.
    # This makes the rule useless
    # https://dart-lang.github.io/linter/lints/prefer_mixin.html
    prefer_mixin: false

    # Conflicting with `avoid_relative_lib_imports` which is enforced
    # https://dart-lang.github.io/linter/lints/prefer_relative_imports.html
    prefer_relative_imports: false

    # Use whatever makes you happy. noexcuse doesn't define a style
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/prefer_single_quotes.html
    prefer_single_quotes: false

    # Definitely not a rule for standard dart code. Maybe relevant for packages
    # https://dart-lang.github.io/linter/lints/public_member_api_docs.html
    public_member_api_docs: false

    # Working, results in consistent code. But too opinionated
    # Discussion: https://github.com/passsy/dart-lint/issues/1
    #
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/sort_constructors_first.html
    sort_constructors_first: false

    # Too many false positives.
    # Using the pedantic package for the unawaited function doesn't make code better readable
    #
    # pedantic: enabled
    # https://dart-lang.github.io/linter/lints/unawaited_futures.html
    unawaited_futures: false

    # Disabled because `final` prevents accidental reassignment
    # https://dart-lang.github.io/linter/lints/unnecessary_final.html
    unnecessary_final: false

    # Flutter setState is a good example where a lambda should always be used.
    # https://github.com/dart-lang/linter/issues/498
    #
    # Some generic code sometimes requires lambdas, otherwise the generic type isn't forwarded correctly.
    #
    # https://dart-lang.github.io/linter/lints/unnecessary_lambdas.html
    unnecessary_lambdas: false


    # Naming is hard, strict rules don't help
    # pedantic: disabled
    # https://dart-lang.github.io/linter/lints/use_to_and_as_if_applicable.html
    use_to_and_as_if_applicable: false
